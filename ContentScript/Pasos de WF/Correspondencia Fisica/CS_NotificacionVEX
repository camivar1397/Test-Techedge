/*
████████╗███████╗ ██████╗██╗  ██╗███████╗██████╗  ██████╗ ███████╗    ████████╗███████╗ █████╗ ███╗   ███╗
╚══██╔══╝██╔════╝██╔════╝██║  ██║██╔════╝██╔══██╗██╔════╝ ██╔════╝    ╚══██╔══╝██╔════╝██╔══██╗████╗ ████║
   ██║   █████╗  ██║     ███████║█████╗  ██║  ██║██║  ███╗█████╗         ██║   █████╗  ███████║██╔████╔██║
   ██║   ██╔══╝  ██║     ██╔══██║██╔══╝  ██║  ██║██║   ██║██╔══╝         ██║   ██╔══╝  ██╔══██║██║╚██╔╝██║
   ██║   ███████╗╚██████╗██║  ██║███████╗██████╔╝╚██████╔╝███████╗       ██║   ███████╗██║  ██║██║ ╚═╝ ██║
   ╚═╝   ╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═════╝  ╚═════╝ ╚══════╝       ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝
                                            ╦╔╗╔╔═╗╔═╗╦╦═╗╦╔╗╔╔═╗  ╔╦╗╦═╗╦ ╦╔═╗╔╦╗  ╔═╗╦  ╔═╗╔╗ ╔═╗╦  ╦ ╦ ╦
                                            ║║║║╚═╗╠═╝║╠╦╝║║║║║ ╦   ║ ╠╦╝║ ║╚═╗ ║   ║ ╦║  ║ ║╠╩╗╠═╣║  ║ ╚╦╝
                                            ╩╝╚╝╚═╝╩  ╩╩╚═╩╝╚╝╚═╝   ╩ ╩╚═╚═╝╚═╝ ╩   ╚═╝╩═╝╚═╝╚═╝╩ ╩╩═╝╩═╝╩ 
*/
/***** CS notificación VEX - DGC 30/09/2020 BEGIN *****/

//Definicion de constantes
APC = docman.getScriptByNickname("am_correspondencia_config").getCSVars()?.app
wfstatus = workflow.getWorkflowStatus(workID, subWorkID)
wfattr = wfstatus.attributes
wfseq = wfattr.data.Seq
form = forms.getWorkFlowFormDirect(wfstatus, "Form")
emailtemplate = docman.getNode(APC.constants.correoDisEle)

//Definicion de variables
mailList = []

//Objeto correo
class EmailProperties{
    String email
    String asunto
    String footer
    String info
    String dep
}

//Instancia del objeto
correo = new EmailProperties()

/***************************Main Code BEGIN***************************/

try{
    
    //Obtener lista de correos excepcion VEX
    getVEX()
    
    //Crear el cuerpo de correo
    setEmailProperties()
    
    //Enviar correo
    send()
    
    //Actualizar estado
    update()
    
}catch(e){
    log.error("Error en la notificacion copiados VEX", e)
}

/***************************Main Code END***************************/

/***************************Funciones BEGIN***************************/

//Funcion para obtener correos y usuarios dependencias VEX
def getVEX(){
    
    //Obtener la lista de dependencias
    def ListDep = obtenerDep()
    
    //Realizar la consulta de las excepciones por dependencias VEX
    def query = """SELECT (SELECT STRING_AGG(Destinatario,';') FROM Z_COR_DependenciasVEX WHERE Seq = VEX.Seq) AS Destinatario,
                           VEX.Correo
                   FROM Z_COR_DependenciasVEX AS VEX
                   WHERE VEX.Dependencia IN (${ListDep})
                   AND Activo = 1
                """
    
    def result =  sql.runSQLFast(query, false, false, 0).rows
    
    //Validar que la consulta tenga resultados
    //Iterar el result
    result.each{row->
        
        //Agregar usuarios destinatarios
        def destinatarios = row.Destinatario?.split(";")
        if(destinatarios){
            for(int i=0; i<destinatarios.size(); i++){
                mailList.add(users.getUserById(destinatarios[i] as long).email)
            }
        }            
        
        //Agregar correos
        def correo = row.Correo?.split(";")
        if(correo){
            for(int i=0; i<correo.size(); i++){
                mailList.add(correo[i])
            }
        }
    }
}

//Funcion para mapear las propiedades del objeto correo
def setEmailProperties(){
    
    //Cuerpo del correo
    correo.email = "<tr>"
    correo.email+="<td align='justify'>${form.asunto.value}</td>"
    correo.email+="<td align='center'><a href='https://co-explorationlab.r53.techedgegroup.com/OTCS/llisapi.dll?func=ll&objId=${form.idcarpeta.value}&objAction=browse' target='_blank'>${form.radicado.value}</td>"
    correo.email+="<td align='center'>${form.fecharadicado.valueAsDate.format("dd/MM/yyyy hh:mm aa")}</td>"
    correo.email+="<td align='center'>${runCS("${APC.subScripts.siglatovalue}", "Parametros", "${form.tipocomunicacion.value}", null, null, "TIPC").result}</td>"
    correo.email+="<td align='center'>${form.origencomunicado.value == "INT" ? users.getUserById(form.deusuarioint.value as long).displayName : form.deusuariorext.value}</td>"
    correo.email+="<td align='center'>${form.origencomunicado.value == "INT" ? getDependence(form.dedependencia.value) : (form.deempresa.value.isEmpty() ? "N/A" : getEnterprise(form.deempresa.value))}</td>"
    correo.email+="<td align='center'>${form.nanexos.value}</td>"
    correo.email+="<td align='center'>${form.nfolios.value}</td>"
    correo.email+= "</tr>"
    
    //Asunto 
    correo.asunto = "Copia comunicación No. ${form.radicado.value}"
    
    //Footer
    correo.footer = runCS("${APC.subScripts.siglatovalue}", "Parametros", "Footer", null, null, "FISICA").result
    
    //Informacion
    correo.info = runCS("${APC.subScripts.siglatovalue}", "Parametros", "CINF", null, null, "FISICA").result
    
    //Label dependencia
    correo.dep = form.origencomunicado.value == "INT" ? "Dependencia" : "Empresa remitente"
}

//Funcion para enviar el correo
def send(){
    
    //Evaluar el template
    def emailContext = ['asunto':"<h1>${correo.asunto}</h1>", 
                        'dependencia':correo.dep, 
                        'body':correo.email, 
                        'footer':correo.footer, 
                        'info':correo.info]
    
    def mailbody = template.evaluateTemplate(emailtemplate, emailContext)
    def email = mail.create(mailbody)
    
    //Destinatarios
    mailList.unique().each{it->
        email.to(it)
    }
    
    //Enviar correo
    email.from("correspondenciatechedgecol@gmail.com")
    email.subject(correo.asunto)
    mail.send(email, "correspondencia")   
}

//Funcion para actualizar el estado en el formulario
def update(){
       
    //Procedimiento almacenado
    def sp =    """EXEC Z_SP_COR_ActualizarEstado @Seq = '${wfseq}',
                                                  @Radicado = '${form.radicado.value}',
                                                  @Estado = 'Destinatario', @Destinatario = '0',
                                                  @Cargo = '', @Dependencia = '', @CECO = '', @Registro = '',
                                                  @Delegado = '0', @DelDependencia = '',
                                                  @Usuario = '${users.current.ID}',
                                                  @CGC = ''
                """
    
    //Ejecucion del SP
    sql.runSQL(sp, false, false, 0)    
}

/***************************Funciones END***************************/

/****************************Utils BEGIN****************************/

//Funcion para obtener las dependencias
def obtenerDep(){
    
    def listDep = []
    
    //Agregar dependencia destinatario
    !form.paradependencia.value.isEmpty() ? listDep.add(form.paradependencia.value) : null
    
    //Agregar dependencia delegado destinatario
    !form.paradelegadodep.value.isEmpty() ? listDep.add(form.paradelegadodep.value) : null
    
    //Agregar dependencia del remitente
    !form.dedependencia.value.isEmpty() ? listDep.add(form.dedependencia.value) : null
    
    //Agregar dependencia del delegado remitente 
    !form.dedelegadodep.value.isEmpty() ? listDep.add(form.dedelegadodep.value) : null
    
    //Agregar dependencia de los usuarios cc
    form.ccint.each{it->
        !it.dependencia.value.isEmpty() ? listDep.add(it.dependencia.value) : null
        !it.delegadodep.value.isEmpty() ? listDep.add(it.delegadodep.value) : null
    }
    
    //Devolver string de dependencias 'DEP','DEP'
    listDep = listDep.unique()
    StringBuilder stringList = new StringBuilder()
    
    //Iterar las dependencias
    listDep.eachWithIndex{it,i->
        if(i<(listDep.size()-1)){
            stringList.append("'${it}',")
        }else{
            stringList.append("'${it}'")
        }
    }
        
    return stringList.toString()
}

//Funcion para obtener el correo de un usuario
def getEmail(userID){
    
    return users.getUserById(userID as long).email
}

//Funcion para obtener el nombre de una dependencia
def getDependence(dep){
    
    return runCS("${APC.subScripts.siglatovalue}", "Z_COR_Dependencias", "${dep}", "Sigla", "Nombre", null).result
}

//Funcion para obtener el nombre de una empresa
def getEnterprise(nit){
    
    return runCS("${APC.subScripts.siglatovalue}", "Z_COR_Empresas", "${nit}", "NIT", "Nombre", null).result
}

/****************************Utils END****************************/

/***** CS notificación VEX - DGC 30/09/2020 END *****/



